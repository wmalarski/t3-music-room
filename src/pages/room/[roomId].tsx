import { Logout } from "@modules/Logout/Logout";
import { Room } from "@modules/Room/Room";
import { withAuthorization } from "@services/withAuthorization";
import { withTranslations } from "@services/withTranslations";
import { paths } from "@utils/paths";
import type { GetServerSideProps, NextPage } from "next";
import Head from "next/head";
import { z } from "zod";

type Props = {
  roomId: string;
};

const RoomPage: NextPage<Props> = ({ roomId }) => {
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta content="Generated by create-t3-app" name="description" />
        <link href="/favicon.ico" rel="icon" />
      </Head>
      <div>
        <h1>
          Create <span>T3</span> App
        </h1>
        <Logout />
        <Room roomId={roomId} />
      </div>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = withAuthorization(
  withTranslations(({ query }) => {
    const parsed = z.string().safeParse(query.roomId);
    if (!parsed.success) {
      return Promise.resolve({
        redirect: { destination: paths.notFound(), permanent: true },
      });
    }
    return Promise.resolve({ props: { roomId: parsed.data } });
  })
);

export default RoomPage;
