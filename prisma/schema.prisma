// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator js {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Action {
    id        String    @id @default(cuid())
    userId    String
    messageId String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    likeAt    DateTime?
    dislikeAt DateTime?
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    message   Message   @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@unique([userId, messageId])
    @@index([userId])
    @@index([messageId])
}

model Message {
    id        String    @id @default(cuid())
    userId    String
    roomId    String
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    endedAt   DateTime?
    data      String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    room      Room      @relation(fields: [roomId], references: [id], onDelete: Cascade)
    actions   Action[]

    @@index([userId])
    @@index([roomId])
}

model Member {
    id        String   @id @default(cuid())
    role      String
    userId    String
    roomId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

    @@unique([userId, roomId])
    @@index([userId])
    @@index([roomId])
}

model Room {
    id          String    @id @default(cuid())
    name        String
    description String
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    messages    Message[]
    members     Member[]
    invites     Invite[]
}

model Invite {
    id        String   @id @default(cuid())
    roomId    String
    key       String   @default(cuid())
    email     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

    @@unique([email, roomId])
    @@index([roomId])
    @@index([email])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.LongText
    access_token      String? @db.LongText
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.LongText
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    actions       Action[]
    messages      Message[]
    members       Member[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
